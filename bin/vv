#!/usr/bin/env python3
import sys
import os
import subprocess
from base64 import standard_b64encode

def is_kitty():
    return os.environ.get('TERM') == 'xterm-kitty'

def serialize_gr_command(**cmd):
    payload = cmd.pop('payload', None)
    cmd = ','.join(f'{k}={v}' for k, v in cmd.items())
    ans = []
    w = ans.append
    w(b'\033_G'), w(cmd.encode('ascii'))
    if payload:
        w(b';')
        w(payload)
    w(b'\033\\')
    return b''.join(ans)

def write_chunked(**cmd):
    data = standard_b64encode(cmd.pop('data'))
    while data:
        chunk, data = data[:4096], data[4096:]
        m = 1 if data else 0
        sys.stdout.buffer.write(serialize_gr_command(payload=chunk, m=m,
                                                    **cmd))
        sys.stdout.flush()
        cmd.clear()

def display_image(image_data):
    if is_kitty():
        # 使用subprocess.Popen来创建一个管道
        p = subprocess.Popen(['kitty', '+kitten', 'icat'], stdin=subprocess.PIPE)
        p.communicate(input=image_data)
    else:
        write_chunked(a='T', f=100, data=image_data)

if __name__ == "__main__":
    # 检查是否有数据从管道输入
    if not sys.stdin.isatty():
        # 从标准输入读取数据
        image_data = sys.stdin.buffer.read()
    elif len(sys.argv) > 1:
        # 如果提供了文件路径，则从文件读取数据
        with open(sys.argv[1], 'rb') as f:
            image_data = f.read()
    else:
        print("Please provide an image file path or pipe image data.")
        sys.exit(1)
    
    display_image(image_data)

